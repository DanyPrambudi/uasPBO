package TokoObat;

import java.awt.EventQueue;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JTable;
import javax.swing.JButton;
import java.sql.*;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.table.DefaultTableModel;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class pengguna extends JInternalFrame {
	private JTextField txtUsername;
	private JTextField txtPassword;
	private JTable table;
	private DefaultTableModel tabelModel;

	/**
	 * Launch the application.
	 */
	
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					pengguna frame = new pengguna();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	public pengguna() {
		setBounds(100, 100, 450, 300);
		this.setTitle("Pengguna");
		getContentPane().setLayout(null);
		
		JLabel lblUsername = new JLabel("Username");
		lblUsername.setBounds(10, 130, 72, 14);
		getContentPane().add(lblUsername);
		
		txtUsername = new JTextField();
		txtUsername.setBounds(140, 127, 161, 20);
		getContentPane().add(txtUsername);
		txtUsername.setColumns(10);
		
		JLabel lblPassword = new JLabel("Password");
		lblPassword.setBounds(10, 155, 72, 14);
		getContentPane().add(lblPassword);
		
		txtPassword = new JTextField();
		txtPassword.setBounds(140, 152, 161, 20);
		getContentPane().add(txtPassword);
		txtPassword.setColumns(10);
		
		final JComboBox cbxKategori = new JComboBox();
		cbxKategori.setModel(new DefaultComboBoxModel(new String[] {"Admin", "Kasir"}));
		cbxKategori.setBounds(140, 180, 161, 20);
		getContentPane().add(cbxKategori);
		
		JLabel lblKategori = new JLabel("Kategori");
		lblKategori.setBounds(10, 183, 56, 14);
		getContentPane().add(lblKategori);
		
		JScrollPane scrollTable = new JScrollPane();
		scrollTable.setBounds(10, 11, 590, 108);
		getContentPane().add(scrollTable);
		
		table = new JTable();
		table.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				int a = table.getSelectedRow();
		        
		        if(a == -1) {
		            return;
		        }
		        
		        String uname = (String) tabelModel.getValueAt(a, 0);
		        txtUsername.setText(uname);
		        String pass = (String) tabelModel.getValueAt(a, 1);
		        txtPassword.setText(pass);
		        String stat = (String) tabelModel.getValueAt(a, 2);
		        cbxKategori.setSelectedItem(stat);
		        
		        txtUsername.setEnabled(false);
			}
		});
		
		scrollTable.setViewportView(table);	
        tabelModel = new DefaultTableModel();
        tabelModel.addColumn("Username");
        tabelModel.addColumn("Password");
        tabelModel.addColumn("Kategori");
		table.setModel(tabelModel);	
        tampilTabel();
		
		JButton btnTambah = new JButton("TAMBAH");
		btnTambah.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				try {
			        Connection con = configuration.getCon();
			        String query = "INSERT INTO PENGGUNA VALUES(?,?,?)";
			        PreparedStatement prepare = con.prepareStatement(query);
			        
			        prepare.setString(1, txtUsername.getText());
			        prepare.setString(2, txtPassword.getText());
			        prepare.setString(3, (String) cbxKategori.getSelectedItem());

			        prepare.executeUpdate();
			        JOptionPane.showMessageDialog(null, "Data Pengguna Berhasil Ditambahkan");
			        prepare.close();
		        } catch(Exception ex) {
		            JOptionPane.showMessageDialog(null, "Data Pengguna Gagal Ditambahkan");
		            System.out.println(ex);
		        } finally {
		            tampilTabel();
		            //refresh();
		        }
			}
		});
		
		btnTambah.setBounds(140, 214, 89, 23);
		getContentPane().add(btnTambah);
		
		JButton btnUbah = new JButton("UBAH");
		btnUbah.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				try {
			        Connection con = configuration.getCon();
			        String query = "UPDATE PENGGUNA SET  password = ?, status = ? WHERE username = ?";
			        PreparedStatement prepare = con.prepareStatement(query);
			       
			        prepare.setString(1, txtPassword.getText());
			        prepare.setString(2, (String) cbxKategori.getSelectedItem());
			        prepare.setString(3, txtUsername.getText());
			        
			        prepare.executeUpdate();
			        JOptionPane.showMessageDialog(null, "Data Pengguna Berhasil Diubah");
			        prepare.close();
				} catch(Exception ex) {
			            JOptionPane.showMessageDialog(null, "Data Pengguna Gagal Diubah");
			            System.out.println(ex);
		        } finally {
		            tampilTabel();
		            txtUsername.setEnabled(true);
		            //refresh();            
		        }
			}
		});
		
		btnUbah.setBounds(240, 214, 89, 23);
		getContentPane().add(btnUbah);
		
		JButton btnHapus = new JButton("HAPUS");
		btnHapus.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				try {
		            Connection con = configuration.getCon();
		            String query = "DELETE FROM PENGGUNA WHERE username = ?";
		            PreparedStatement prepare = con.prepareStatement(query);
		            
		            prepare.setString(1, txtUsername.getText());
		            prepare.executeUpdate();
		            JOptionPane.showMessageDialog(null, "Data Pengguna Berhasil Dihapus");
		            prepare.close();
		        } catch(Exception ex) {
		            JOptionPane.showMessageDialog(null, "Data Pengguna Gagal Dihapus");
		            System.out.println(ex);
		        } finally {
		            tampilTabel();
		            txtUsername.setEnabled(true);
		            //refresh();
		        }
			}
		});
		
		btnHapus.setBounds(340, 214, 89, 23);
		getContentPane().add(btnHapus);
	}
	
	public void tampilTabel() {
        tabelModel.getDataVector().removeAllElements();
        tabelModel.fireTableDataChanged();
        try {
            Connection con = configuration.getCon();
            Statement state = con.createStatement();
            String query = "SELECT * FROM PENGGUNA";
            
            ResultSet rs = state.executeQuery(query);
            
            while(rs.next()) {
                Object obj[] = new Object[3];
                obj[0] = rs.getString(1);
                obj[1] = rs.getString(2);
                obj[2] = rs.getString(3);
                
                tabelModel.addRow(obj);
            }
        } catch(Exception ex) {
            System.out.println(ex);
        }
    }
}
